# https://github.com/estafette/estafette-ci-api/blob/main/helm/estafette-ci-api/values.yaml
api:
  enabled: true
  deployment:
    extraVolumes: |
      - name: client-certificate
        projected:
          sources:
          - secret:
              name: estafette-ci-db-client-secret
              items:
              - key: ca.crt
                path: ca.crt
                mode: 256
              - key: tls.crt
                path: cert
                mode: 256
              - key: tls.key
                path: key
                mode: 256
    extraVolumeMounts: |
      - name: client-certificate
        mountPath: /cockroach-certs
  config:
    enabled: true
    files: |
      config.yaml: |
        database:
          certificateAuthorityPath: /cockroach-certs/ca.crt

# https://github.com/estafette/estafette-ci-web/blob/main/helm/estafette-ci-web/values.yaml
web:
  enabled: true

# https://github.com/estafette/estafette-ci-db-migrator/blob/main/helm/estafette-ci-db-migrator/values.yaml
db-migrator:
  enabled: true
  job:
    env:
      SSL_CA_PATH: /cockroach-certs/ca.crt
      WAIT_SECONDS: 30
    extraVolumes: |
      - name: client-certificate
        projected:
          sources:
          - secret:
              name: estafette-ci-db-client-secret
              items:
              - key: ca.crt
                path: ca.crt
                mode: 256
              - key: tls.crt
                path: cert
                mode: 256
              - key: tls.key
                path: key
                mode: 256
    extraVolumeMounts: |
      - name: client-certificate
        mountPath: /cockroach-certs


# https://github.com/estafette/estafette-ci-cron-event-sender/blob/main/helm/estafette-ci-cron-event-sender/values.yaml
cron-event-sender:
  enabled: true

# https://github.com/cockroachdb/helm-charts/blob/master/cockroachdb/values.yaml
db:
  enabled: true
  clients:
  - root
  - api
  - migrator
  statefulset:
    env:
    - name: COCKROACH_SKIP_ENABLING_DIAGNOSTIC_REPORTING
      value: "true"
  service:
    public:
      annotations:
        # required when tls is enabled for cluster and gce ingress is used
        service.alpha.kubernetes.io/app-protocols: '{"http":"HTTPS"}'
  ingress:
    annotations:
      # required when tls is enabled for cluster and nginx ingress is used
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS

# https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml
metrics:
  enabled: true
  server:
    enabled: true

    global:
      scrape_interval: 5s
      scrape_timeout: 5s
      evaluation_interval: 5s

    persistentVolume:
      enabled: false

    emptyDir:
      sizeLimit: "1Gi"

    replicaCount: 1

    retention: "6h"

  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: 'kubernetes-nodes-resource'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics/resource
              # for kubernetes < 1.18 use
              # replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
          metric_relabel_configs:
            # keep only the metrics required to calculate max cpu/memory usage by a build/release job
            - source_labels: [__name__]
              action: keep
              regex: container_cpu_usage_seconds_total|container_memory_working_set_bytes
            # keep only for namespace running build/release jobs
            - source_labels: [namespace]
              action: keep
              regex: .+-jobs
    recording_rules.yml:
      groups:
      - name: estafette-ci-max-cpu-calculation
        rules:
        # to calculate the max cpu for a job it needs an aggregate to update the rate frequently
        # powers query: max_over_time(container_cpu_usage_rate1m{container="estafette-ci-builder",pod="...."}[3h])
        - record: container_cpu_usage_rate1m
          expr: avg( irate(container_cpu_usage_seconds_total{container!="POD", container!=""}[6h]) ) by (container,pod,namespace)

  # disable all other components
  serviceAccounts:
    alertmanager:
      create: false
    nodeExporter:
      create: false
    pushgateway:
      create: false
    server:
      create: true

  alertmanager:
    enabled: false

  configmapReload:
    prometheus:
      enabled: true
    alertmanager:
      enabled: false

  kubeStateMetrics:
    enabled: false

  nodeExporter:
    enabled: false


  pushgateway:
    enabled: false

# https://github.com/nats-io/k8s/blob/master/helm/charts/nats/values.yaml
queue:
  enabled: true

  natsbox:
    enabled: false

# values specific to this umbrella chart
nameOverride: ""
fullnameOverride: ""
